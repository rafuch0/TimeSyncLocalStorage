{
  "author": {
    "name": "Andris Reinman",
    "email": "andris@node.ee"
  },
  "name": "pem",
  "description": "Create private keys and certificates with node.js",
  "version": "0.1.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/andris9/pem.git"
  },
  "main": "lib/pem",
  "scripts": {
    "test": "nodeunit test"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "*"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "pem\n===\n\nCreate private keys and certificates with node.js\n\n[![Build Status](https://secure.travis-ci.org/andris9/pem.png)](http://travis-ci.org/andris9/pem)\n\n**NB!** This module does not yet support node v0.7+/0.8 or Windows. Sorry.\n\n## Installation\n\nInstall with npm\n\n    npm install pem\n\n## API\n\n### Create a private key\n\nUse `createPrivateKey` for creating private keys\n\n    pem.createPrivateKey(keyBitsize, callback)\n\nWhere\n\n  * **keyBitsize** is an optional size of the key, defaults to 1024 (bit)\n  * **callback** is a callback function with an error object and `{key}`\n\n### Create a Certificate Signing Request\n\nUse `createCSR` for creating private keys\n\n    pem.createCSR(options, callback)\n\nWhere\n\n  * **options** is an optional options object\n  * **callback** is a callback function with an error object and `{csr, clientKey}`\n\nPossible options are the following\n\n  * **clientKey** is an optional client key to use\n  * **keyBitsize** - if `clientKey` is undefined, bit size to use for generating a new key (defaults to 1024)\n  * **hash** is a hash function to use (either `md5` or `sha1`, defaults to `sha1`)\n  * **country** is a CSR country field\n  * **state** is a CSR state field\n  * **locality** is a CSR locality field\n  * **organization** is a CSR organization field\n  * **organizationUnit** is a CSR organizational unit field\n  * **commonName** is a CSR common name field (defaults to `localhost`)\n  * **emailAddress** is a CSR email address field\n\n### Create a certificate\n\nUse `createCertificate` for creating private keys\n\n    pem.createCertificate(options, callback)\n\nWhere\n\n  * **options** is an optional options object\n  * **callback** is a callback function with an error object and `{certificate, csr, clientKey, serviceKey}`\n\nPossible options include all the options for `createCSR` - in case `csr` parameter is not defined and a new\nCSR needs to be generated.\n\nIn addition, possible options are the following\n\n  * **serviceKey** is a private key for signing the certificate, if not defined a new one is generated\n  * **selfSigned** - if set to true and `serviceKey` is not defined, use `clientKey` for signing\n  * **csr** is a CSR for the certificate, if not defined a new one is generated\n  * **days** is the certificate expire time in days\n\n### Export a public key\n\nUse `getPublicKey` for exporting a public key from a private key, CSR or certificate\n\n    pem.getPublicKey(certificate, callback)\n\nWhere\n\n  * **certificate** is a PEM encoded private key, CSR or certificate\n  * **callback** is a callback function with an error object and `{publicKey}`\n\n### Read certificate info\n\nUse `readCertificateInfo` for reading subject data from a certificate or a CSR\n\n    pem.readCertificateInfo(certificate, callback)\n\nWhere\n\n  * **certificate** is a PEM encoded CSR or a certificate\n  * **callback** is a callback function with an error object and `{country, state, locality, organization, organizationUnit, commonName, emailAddress}`\n\n## License\n\n**MIT**",
  "_id": "pem@0.1.0",
  "_from": "pem@latest"
}
